from security import WEATHER_KEY, GEO_KEY, TOKEN
from aiogram import Bot, Dispatcher, executor, types
import requests

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
weather_status = {
    "clear": "—è—Å–Ω–æ",
    "partly-cloudy": "–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ",
    "cloudy": "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏",
    "overcast": "–ø–∞—Å–º—É—Ä–Ω–æ",
    "drizzle": "–º–æ—Ä–æ—Å—å",
    "light-rain": "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
    "rain": "–¥–æ–∂–¥—å",
    "moderate-rain": "—É–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    "heavy-rain": "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    "continuous-heavy-rain": "–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    "showers": "–ª–∏–≤–µ–Ω—å",
    "wet-snow": "–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º",
    "light-snow": "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
    "snow": "—Å–Ω–µ–≥",
    "snow-showers": "—Å–Ω–µ–≥–æ–ø–∞–¥",
    "hail": "–≥—Ä–∞–¥",
    "thunderstorm": "–≥—Ä–æ–∑–∞",
    "thunderstorm-with-rain": "–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π",
    "thunderstorm-with-hail": "–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º",
}


@dp.message_handler(commands='start')
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton("üß≠", request_location=True)
    keyboard.add(button)
    await message.answer("–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ üè†\n"
                         "–õ–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥–∞—á–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ üß≠", reply_markup=keyboard)


@dp.message_handler(content_types=['location'])
async def get_geo(message: types.Message):
    lat = message.location.latitude
    lon = message.location.longitude
    await get_weather_data(lat, lon, message)


@dp.message_handler(content_types=['text'])
async def city_input(message: types.Message):
    city = message.text.strip().lower()
    url = f"https://geocode-maps.yandex.ru/1.x/?apikey={GEO_KEY}&geocode={city}&format=json"

    try:
        response = requests.get(url)
        response_data = response.json()
        coordinates = response_data.get("response").get("GeoObjectCollection").\
            get("featureMember")[0].get("GeoObject").get("Point").get("pos").split()
        lat = coordinates[1]
        lon = coordinates[0]
        await get_weather_data(lat, lon, message)

    except Exception as ex:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..")


async def get_weather_data(lat, lon, message):
    headers = {"X-Yandex-API-Key": WEATHER_KEY}
    url = f"https://api.weather.yandex.ru/v2/forecast?lat={lat}&lon={lon}"

    try:
        response = requests.get(url, headers=headers)
        weather_data = response.json()
        fact = weather_data.get("fact")
        temp = fact.get("temp")
        status = fact.get("condition")
        feels_like = fact.get("feels_like")
        await message.answer(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C\n"
                             f"{weather_status.get(status).title()}")

    except Exception as ex:
        message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..")


def main():
    executor.start_polling(dp, skip_updates=True)


if __name__ == "__main__":
    main()
